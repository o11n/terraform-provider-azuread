package security
import (
    "strings"
    "errors"
)
// 
type AlertDetermination int

const (
    UNKNOWN_ALERTDETERMINATION AlertDetermination = iota
    APT_ALERTDETERMINATION
    MALWARE_ALERTDETERMINATION
    SECURITYPERSONNEL_ALERTDETERMINATION
    SECURITYTESTING_ALERTDETERMINATION
    UNWANTEDSOFTWARE_ALERTDETERMINATION
    OTHER_ALERTDETERMINATION
    MULTISTAGEDATTACK_ALERTDETERMINATION
    COMPROMISEDACCOUNT_ALERTDETERMINATION
    PHISHING_ALERTDETERMINATION
    MALICIOUSUSERACTIVITY_ALERTDETERMINATION
    NOTMALICIOUS_ALERTDETERMINATION
    NOTENOUGHDATATOVALIDATE_ALERTDETERMINATION
    CONFIRMEDACTIVITY_ALERTDETERMINATION
    LINEOFBUSINESSAPPLICATION_ALERTDETERMINATION
    UNKNOWNFUTUREVALUE_ALERTDETERMINATION
)

func (i AlertDetermination) String() string {
    return []string{"UNKNOWN", "APT", "MALWARE", "SECURITYPERSONNEL", "SECURITYTESTING", "UNWANTEDSOFTWARE", "OTHER", "MULTISTAGEDATTACK", "COMPROMISEDACCOUNT", "PHISHING", "MALICIOUSUSERACTIVITY", "NOTMALICIOUS", "NOTENOUGHDATATOVALIDATE", "CONFIRMEDACTIVITY", "LINEOFBUSINESSAPPLICATION", "UNKNOWNFUTUREVALUE"}[i]
}
func ParseAlertDetermination(v string) (interface{}, error) {
    result := UNKNOWN_ALERTDETERMINATION
    switch strings.ToUpper(v) {
        case "UNKNOWN":
            result = UNKNOWN_ALERTDETERMINATION
        case "APT":
            result = APT_ALERTDETERMINATION
        case "MALWARE":
            result = MALWARE_ALERTDETERMINATION
        case "SECURITYPERSONNEL":
            result = SECURITYPERSONNEL_ALERTDETERMINATION
        case "SECURITYTESTING":
            result = SECURITYTESTING_ALERTDETERMINATION
        case "UNWANTEDSOFTWARE":
            result = UNWANTEDSOFTWARE_ALERTDETERMINATION
        case "OTHER":
            result = OTHER_ALERTDETERMINATION
        case "MULTISTAGEDATTACK":
            result = MULTISTAGEDATTACK_ALERTDETERMINATION
        case "COMPROMISEDACCOUNT":
            result = COMPROMISEDACCOUNT_ALERTDETERMINATION
        case "PHISHING":
            result = PHISHING_ALERTDETERMINATION
        case "MALICIOUSUSERACTIVITY":
            result = MALICIOUSUSERACTIVITY_ALERTDETERMINATION
        case "NOTMALICIOUS":
            result = NOTMALICIOUS_ALERTDETERMINATION
        case "NOTENOUGHDATATOVALIDATE":
            result = NOTENOUGHDATATOVALIDATE_ALERTDETERMINATION
        case "CONFIRMEDACTIVITY":
            result = CONFIRMEDACTIVITY_ALERTDETERMINATION
        case "LINEOFBUSINESSAPPLICATION":
            result = LINEOFBUSINESSAPPLICATION_ALERTDETERMINATION
        case "UNKNOWNFUTUREVALUE":
            result = UNKNOWNFUTUREVALUE_ALERTDETERMINATION
        default:
            return 0, errors.New("Unknown AlertDetermination value: " + v)
    }
    return &result, nil
}
func SerializeAlertDetermination(values []AlertDetermination) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
