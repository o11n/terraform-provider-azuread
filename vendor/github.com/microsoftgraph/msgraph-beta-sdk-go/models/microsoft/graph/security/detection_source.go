package security
import (
    "strings"
    "errors"
)
// 
type DetectionSource int

const (
    UNKNOWN_DETECTIONSOURCE DetectionSource = iota
    MICROSOFTDEFENDERFORENDPOINT_DETECTIONSOURCE
    ANTIVIRUS_DETECTIONSOURCE
    SMARTSCREEN_DETECTIONSOURCE
    CUSTOMTI_DETECTIONSOURCE
    MICROSOFTDEFENDERFOROFFICE365_DETECTIONSOURCE
    AUTOMATEDINVESTIGATION_DETECTIONSOURCE
    MICROSOFTTHREATEXPERTS_DETECTIONSOURCE
    CUSTOMDETECTION_DETECTIONSOURCE
    MICROSOFTDEFENDERFORIDENTITY_DETECTIONSOURCE
    CLOUDAPPSECURITY_DETECTIONSOURCE
    MICROSOFT365DEFENDER_DETECTIONSOURCE
    AADIDENTITYPROTECTION_DETECTIONSOURCE
    MANUAL_DETECTIONSOURCE
    MICROSOFTDATALOSSPREVENTION_DETECTIONSOURCE
    APPGOVERNANCEPOLICY_DETECTIONSOURCE
    APPGOVERNANCEDETECTION_DETECTIONSOURCE
    UNKNOWNFUTUREVALUE_DETECTIONSOURCE
)

func (i DetectionSource) String() string {
    return []string{"UNKNOWN", "MICROSOFTDEFENDERFORENDPOINT", "ANTIVIRUS", "SMARTSCREEN", "CUSTOMTI", "MICROSOFTDEFENDERFOROFFICE365", "AUTOMATEDINVESTIGATION", "MICROSOFTTHREATEXPERTS", "CUSTOMDETECTION", "MICROSOFTDEFENDERFORIDENTITY", "CLOUDAPPSECURITY", "MICROSOFT365DEFENDER", "AADIDENTITYPROTECTION", "MANUAL", "MICROSOFTDATALOSSPREVENTION", "APPGOVERNANCEPOLICY", "APPGOVERNANCEDETECTION", "UNKNOWNFUTUREVALUE"}[i]
}
func ParseDetectionSource(v string) (interface{}, error) {
    result := UNKNOWN_DETECTIONSOURCE
    switch strings.ToUpper(v) {
        case "UNKNOWN":
            result = UNKNOWN_DETECTIONSOURCE
        case "MICROSOFTDEFENDERFORENDPOINT":
            result = MICROSOFTDEFENDERFORENDPOINT_DETECTIONSOURCE
        case "ANTIVIRUS":
            result = ANTIVIRUS_DETECTIONSOURCE
        case "SMARTSCREEN":
            result = SMARTSCREEN_DETECTIONSOURCE
        case "CUSTOMTI":
            result = CUSTOMTI_DETECTIONSOURCE
        case "MICROSOFTDEFENDERFOROFFICE365":
            result = MICROSOFTDEFENDERFOROFFICE365_DETECTIONSOURCE
        case "AUTOMATEDINVESTIGATION":
            result = AUTOMATEDINVESTIGATION_DETECTIONSOURCE
        case "MICROSOFTTHREATEXPERTS":
            result = MICROSOFTTHREATEXPERTS_DETECTIONSOURCE
        case "CUSTOMDETECTION":
            result = CUSTOMDETECTION_DETECTIONSOURCE
        case "MICROSOFTDEFENDERFORIDENTITY":
            result = MICROSOFTDEFENDERFORIDENTITY_DETECTIONSOURCE
        case "CLOUDAPPSECURITY":
            result = CLOUDAPPSECURITY_DETECTIONSOURCE
        case "MICROSOFT365DEFENDER":
            result = MICROSOFT365DEFENDER_DETECTIONSOURCE
        case "AADIDENTITYPROTECTION":
            result = AADIDENTITYPROTECTION_DETECTIONSOURCE
        case "MANUAL":
            result = MANUAL_DETECTIONSOURCE
        case "MICROSOFTDATALOSSPREVENTION":
            result = MICROSOFTDATALOSSPREVENTION_DETECTIONSOURCE
        case "APPGOVERNANCEPOLICY":
            result = APPGOVERNANCEPOLICY_DETECTIONSOURCE
        case "APPGOVERNANCEDETECTION":
            result = APPGOVERNANCEDETECTION_DETECTIONSOURCE
        case "UNKNOWNFUTUREVALUE":
            result = UNKNOWNFUTUREVALUE_DETECTIONSOURCE
        default:
            return 0, errors.New("Unknown DetectionSource value: " + v)
    }
    return &result, nil
}
func SerializeDetectionSource(values []DetectionSource) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
